.TH "QwtAbstractLegend" 3 "Thu Dec 11 2014" "Version 6.1.2" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtAbstractLegend \- 
.PP
Abstract base class for legend widgets\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_abstract_legend\&.h>\fP
.PP
Inherits QFrame\&.
.PP
Inherited by \fBQwtLegend\fP\&.
.SS "Public Slots"

.in +1c
.ti -1c
.RI "virtual void \fBupdateLegend\fP (const QVariant &itemInfo, const QList< \fBQwtLegendData\fP > &data)=0"
.br
.RI "\fIUpdate the entries for a plot item\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtAbstractLegend\fP (QWidget *parent=NULL)"
.br
.ti -1c
.RI "virtual \fB~QwtAbstractLegend\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "virtual void \fBrenderLegend\fP (QPainter *painter, const QRectF &rect, bool fillBackground) const =0"
.br
.ti -1c
.RI "virtual bool \fBisEmpty\fP () const =0"
.br
.ti -1c
.RI "virtual int \fBscrollExtent\fP (Qt::Orientation) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
Abstract base class for legend widgets\&. 

Legends, that need to be under control of the \fBQwtPlot\fP layout system need to be derived from \fBQwtAbstractLegend\fP\&.
.PP
\fBNote:\fP
.RS 4
Other type of legends can be implemented by connecting to the \fBQwtPlot::legendDataChanged()\fP signal\&. But as these legends are unknown to the plot layout system the layout code ( on screen and for \fBQwtPlotRenderer\fP ) need to be organized in application code\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBQwtLegend\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtAbstractLegend::QwtAbstractLegend (QWidget *parent = \fCNULL\fP)\fC [explicit]\fP"
Constructor
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent widget 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual bool QwtAbstractLegend::isEmpty () const\fC [pure virtual]\fP"

.PP
\fBReturns:\fP
.RS 4
True, when no plot item is inserted 
.RE
.PP

.PP
Implemented in \fBQwtLegend\fP\&.
.SS "virtual void QwtAbstractLegend::renderLegend (QPainter *painter, const QRectF &rect, boolfillBackground) const\fC [pure virtual]\fP"
Render the legend into a given rectangle\&.
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIrect\fP Bounding rectangle 
.br
\fIfillBackground\fP When true, fill rect with the widget background
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBrenderLegend()\fP is used by \fBQwtPlotRenderer\fP 
.RE
.PP

.PP
Implemented in \fBQwtLegend\fP\&.
.SS "int QwtAbstractLegend::scrollExtent (Qt::Orientationorientation) const\fC [virtual]\fP"
Return the extent, that is needed for elements to scroll the legend ( usually scrollbars ),
.PP
\fBParameters:\fP
.RS 4
\fIorientation\fP Orientation 
.RE
.PP
\fBReturns:\fP
.RS 4
Extent of the corresponding scroll element 
.RE
.PP

.PP
Reimplemented in \fBQwtLegend\fP\&.
.SS "virtual void QwtAbstractLegend::updateLegend (const QVariant &itemInfo, const QList< \fBQwtLegendData\fP > &data)\fC [pure virtual]\fP, \fC [slot]\fP"

.PP
Update the entries for a plot item\&. 
.PP
\fBParameters:\fP
.RS 4
\fIitemInfo\fP Info about an item 
.br
\fIdata\fP List of legend entry attributes for the item 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code\&.
