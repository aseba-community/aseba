.TH "QwtIntervalSymbol" 3 "Thu Dec 11 2014" "Version 6.1.2" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtIntervalSymbol \- 
.PP
A drawing primitive for displaying an interval like an error bar\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_interval_symbol\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBStyle\fP { \fBNoSymbol\fP = -1, \fBBar\fP, \fBBox\fP, \fBUserSymbol\fP = 1000 }"
.br
.RI "\fISymbol style\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtIntervalSymbol\fP (\fBStyle\fP=\fBNoSymbol\fP)"
.br
.ti -1c
.RI "\fBQwtIntervalSymbol\fP (const \fBQwtIntervalSymbol\fP &)"
.br
.RI "\fICopy constructor\&. \fP"
.ti -1c
.RI "virtual \fB~QwtIntervalSymbol\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "\fBQwtIntervalSymbol\fP & \fBoperator=\fP (const \fBQwtIntervalSymbol\fP &)"
.br
.RI "\fIAssignment operator\&. \fP"
.ti -1c
.RI "bool \fBoperator==\fP (const \fBQwtIntervalSymbol\fP &) const "
.br
.RI "\fICompare two symbols\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBQwtIntervalSymbol\fP &) const "
.br
.RI "\fICompare two symbols\&. \fP"
.ti -1c
.RI "void \fBsetWidth\fP (int)"
.br
.ti -1c
.RI "int \fBwidth\fP () const "
.br
.ti -1c
.RI "void \fBsetBrush\fP (const QBrush &b)"
.br
.RI "\fIAssign a brush\&. \fP"
.ti -1c
.RI "const QBrush & \fBbrush\fP () const "
.br
.ti -1c
.RI "void \fBsetPen\fP (const QColor &, qreal \fBwidth\fP=0\&.0, Qt::PenStyle=Qt::SolidLine)"
.br
.ti -1c
.RI "void \fBsetPen\fP (const QPen &)"
.br
.ti -1c
.RI "const QPen & \fBpen\fP () const "
.br
.ti -1c
.RI "void \fBsetStyle\fP (\fBStyle\fP)"
.br
.ti -1c
.RI "\fBStyle\fP \fBstyle\fP () const "
.br
.ti -1c
.RI "virtual void \fBdraw\fP (QPainter *, Qt::Orientation, const QPointF &from, const QPointF &to) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
A drawing primitive for displaying an interval like an error bar\&. 


.PP
\fBSee Also:\fP
.RS 4
\fBQwtPlotIntervalCurve\fP 
.RE
.PP

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtIntervalSymbol::Style\fP"

.PP
Symbol style\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINoSymbol \fP\fP
No Style\&. The symbol cannot be drawn\&. 
.TP
\fB\fIBar \fP\fP
The symbol displays a line with caps at the beginning/end\&. The size of the caps depends on the symbol \fBwidth()\fP\&. 
.TP
\fB\fIBox \fP\fP
The symbol displays a plain rectangle using \fBpen()\fP and \fBbrush()\fP\&. The size of the rectangle depends on the translated interval and the \fBwidth()\fP, 
.TP
\fB\fIUserSymbol \fP\fP
Styles >= UserSymbol are reserved for derived classes of \fBQwtIntervalSymbol\fP that overload \fBdraw()\fP with additional application specific symbol types\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtIntervalSymbol::QwtIntervalSymbol (\fBStyle\fPstyle = \fC\fBNoSymbol\fP\fP)"
Constructor
.PP
\fBParameters:\fP
.RS 4
\fIstyle\fP Style of the symbol 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetStyle()\fP, \fBstyle()\fP, \fBStyle\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "const QBrush & QwtIntervalSymbol::brush () const"

.PP
\fBReturns:\fP
.RS 4
Brush 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetBrush()\fP 
.RE
.PP

.SS "void QwtIntervalSymbol::draw (QPainter *painter, Qt::Orientationorientation, const QPointF &from, const QPointF &to) const\fC [virtual]\fP"
Draw a symbol depending on its style
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIorientation\fP Orientation 
.br
\fIfrom\fP Start point of the interval in target device coordinates 
.br
\fIto\fP End point of the interval in target device coordinates
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetStyle()\fP 
.RE
.PP

.SS "const QPen & QwtIntervalSymbol::pen () const"

.PP
\fBReturns:\fP
.RS 4
Pen 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetPen()\fP, \fBbrush()\fP 
.RE
.PP

.SS "void QwtIntervalSymbol::setBrush (const QBrush &brush)"

.PP
Assign a brush\&. The brush is used for the Box style\&.
.PP
\fBParameters:\fP
.RS 4
\fIbrush\fP Brush 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBbrush()\fP 
.RE
.PP

.SS "void QwtIntervalSymbol::setPen (const QColor &color, qrealwidth = \fC0\&.0\fP, Qt::PenStylestyle = \fCQt::SolidLine\fP)"
Build and assign a pen
.PP
In Qt5 the default pen width is 1\&.0 ( 0\&.0 in Qt4 ) what makes it non cosmetic ( see QPen::isCosmetic() )\&. This method has been introduced to hide this incompatibility\&.
.PP
\fBParameters:\fP
.RS 4
\fIcolor\fP Pen color 
.br
\fIwidth\fP Pen width 
.br
\fIstyle\fP Pen style
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBpen()\fP, \fBbrush()\fP 
.RE
.PP

.SS "void QwtIntervalSymbol::setPen (const QPen &pen)"
Assign a pen
.PP
\fBParameters:\fP
.RS 4
\fIpen\fP Pen 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBpen()\fP, \fBsetBrush()\fP 
.RE
.PP

.SS "void QwtIntervalSymbol::setStyle (\fBStyle\fPstyle)"
Specify the symbol style
.PP
\fBParameters:\fP
.RS 4
\fIstyle\fP Style 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBstyle()\fP, \fBStyle\fP 
.RE
.PP

.SS "void QwtIntervalSymbol::setWidth (intwidth)"
Specify the width of the symbol It is used depending on the style\&.
.PP
\fBParameters:\fP
.RS 4
\fIwidth\fP Width 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBwidth()\fP, \fBsetStyle()\fP 
.RE
.PP

.SS "\fBQwtIntervalSymbol::Style\fP QwtIntervalSymbol::style () const"

.PP
\fBReturns:\fP
.RS 4
Current symbol style 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetStyle()\fP 
.RE
.PP

.SS "int QwtIntervalSymbol::width () const"

.PP
\fBReturns:\fP
.RS 4
Width of the symbol\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetWidth()\fP, \fBsetStyle()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code\&.
