.TH "QwtRasterData" 3 "Thu Dec 11 2014" "Version 6.1.2" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtRasterData \- 
.PP
\fBQwtRasterData\fP defines an interface to any type of raster data\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_raster_data\&.h>\fP
.PP
Inherited by \fBQwtMatrixRasterData\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBConrecFlag\fP { \fBIgnoreAllVerticesOnLevel\fP = 0x01, \fBIgnoreOutOfRange\fP = 0x02 }"
.br
.RI "\fIFlags to modify the contour algorithm\&. \fP"
.ti -1c
.RI "typedef QMap< double, QPolygonF > \fBContourLines\fP"
.br
.RI "\fIContour lines\&. \fP"
.ti -1c
.RI "typedef QFlags< \fBConrecFlag\fP > \fBConrecFlags\fP"
.br
.RI "\fIFlags to modify the contour algorithm\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtRasterData\fP ()"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "virtual \fB~QwtRasterData\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "virtual void \fBsetInterval\fP (Qt::Axis, const \fBQwtInterval\fP &)"
.br
.ti -1c
.RI "const \fBQwtInterval\fP & \fBinterval\fP (Qt::Axis) const "
.br
.ti -1c
.RI "virtual QRectF \fBpixelHint\fP (const QRectF &) const "
.br
.RI "\fIPixel hint\&. \fP"
.ti -1c
.RI "virtual void \fBinitRaster\fP (const QRectF &, const QSize &raster)"
.br
.RI "\fIInitialize a raster\&. \fP"
.ti -1c
.RI "virtual void \fBdiscardRaster\fP ()"
.br
.RI "\fIDiscard a raster\&. \fP"
.ti -1c
.RI "virtual double \fBvalue\fP (double x, double y) const =0"
.br
.ti -1c
.RI "virtual \fBContourLines\fP \fBcontourLines\fP (const QRectF &rect, const QSize &raster, const QList< double > &levels, \fBConrecFlags\fP) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBQwtRasterData\fP defines an interface to any type of raster data\&. 

\fBQwtRasterData\fP is an abstract interface, that is used by \fBQwtPlotRasterItem\fP to find the values at the pixels of its raster\&.
.PP
Often a raster item is used to display values from a matrix\&. Then the derived raster data class needs to implement some sort of resampling, that maps the raster of the matrix into the requested raster of the raster item ( depending on resolution and scales of the canvas )\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtRasterData::ConrecFlag\fP"

.PP
Flags to modify the contour algorithm\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIIgnoreAllVerticesOnLevel \fP\fP
Ignore all vertices on the same level\&. 
.TP
\fB\fIIgnoreOutOfRange \fP\fP
Ignore all values, that are out of range\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBQwtRasterData::ContourLines\fP QwtRasterData::contourLines (const QRectF &rect, const QSize &raster, const QList< double > &levels, \fBConrecFlags\fPflags) const\fC [virtual]\fP"
Calculate contour lines
.PP
\fBParameters:\fP
.RS 4
\fIrect\fP Bounding rectangle for the contour lines 
.br
\fIraster\fP Number of data pixels of the raster data 
.br
\fIlevels\fP List of limits, where to insert contour lines 
.br
\fIflags\fP Flags to customize the contouring algorithm
.RE
.PP
\fBReturns:\fP
.RS 4
Calculated contour lines
.RE
.PP
An adaption of CONREC, a simple contouring algorithm\&. http://local.wasp.uwa.edu.au/~pbourke/papers/conrec/ 
.SS "void QwtRasterData::discardRaster ()\fC [virtual]\fP"

.PP
Discard a raster\&. After the composition of an image \fBQwtPlotSpectrogram\fP calls \fBdiscardRaster()\fP\&.
.PP
The default implementation does nothing, but if data has been loaded in \fBinitRaster()\fP, it could deleted now\&.
.PP
\fBSee Also:\fP
.RS 4
\fBinitRaster()\fP, \fBvalue()\fP 
.RE
.PP

.SS "void QwtRasterData::initRaster (const QRectF &area, const QSize &raster)\fC [virtual]\fP"

.PP
Initialize a raster\&. Before the composition of an image \fBQwtPlotSpectrogram\fP calls \fBinitRaster()\fP, announcing the area and its resolution that will be requested\&.
.PP
The default implementation does nothing, but for data sets that are stored in files, it might be good idea to reimplement \fBinitRaster()\fP, where the data is resampled and loaded into memory\&.
.PP
\fBParameters:\fP
.RS 4
\fIarea\fP Area of the raster 
.br
\fIraster\fP Number of horizontal and vertical pixels
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBinitRaster()\fP, \fBvalue()\fP 
.RE
.PP

.SS "const \fBQwtInterval\fP & QwtRasterData::interval (Qt::Axisaxis) const\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
Bounding interval for a axis 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetInterval\fP 
.RE
.PP

.SS "QRectF QwtRasterData::pixelHint (const QRectF &area) const\fC [virtual]\fP"

.PP
Pixel hint\&. \fBpixelHint()\fP returns the geometry of a pixel, that can be used to calculate the resolution and alignment of the plot item, that is representing the data\&.
.PP
Width and height of the hint need to be the horizontal and vertical distances between 2 neighbored points\&. The center of the hint has to be the position of any point ( it doesn't matter which one )\&.
.PP
An empty hint indicates, that there are values for any detail level\&.
.PP
Limiting the resolution of the image might significantly improve the performance and heavily reduce the amount of memory when rendering a QImage from the raster data\&.
.PP
The default implementation returns an empty rectangle recommending to render in target device ( f\&.e\&. screen ) resolution\&.
.PP
\fBParameters:\fP
.RS 4
\fIarea\fP In most implementations the resolution of the data doesn't depend on the requested area\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Bounding rectangle of a pixel 
.RE
.PP

.PP
Reimplemented in \fBQwtMatrixRasterData\fP\&.
.SS "void QwtRasterData::setInterval (Qt::Axisaxis, const \fBQwtInterval\fP &interval)\fC [virtual]\fP"
Set the bounding interval for the x, y or z coordinates\&.
.PP
\fBParameters:\fP
.RS 4
\fIaxis\fP Axis 
.br
\fIinterval\fP Bounding interval
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBinterval()\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtMatrixRasterData\fP\&.
.SS "virtual double QwtRasterData::value (doublex, doubley) const\fC [pure virtual]\fP"

.PP
\fBReturns:\fP
.RS 4
the value at a raster position 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP X value in plot coordinates 
.br
\fIy\fP Y value in plot coordinates 
.RE
.PP

.PP
Implemented in \fBQwtMatrixRasterData\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code\&.
