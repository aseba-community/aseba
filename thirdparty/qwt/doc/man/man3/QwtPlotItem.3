.TH "QwtPlotItem" 3 "Thu Dec 11 2014" "Version 6.1.2" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtPlotItem \- 
.PP
Base class for items on the plot canvas\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_plot_item\&.h>\fP
.PP
Inherited by \fBQwtPlotGrid\fP, \fBQwtPlotLegendItem\fP, \fBQwtPlotMarker\fP, \fBQwtPlotRasterItem\fP, \fBQwtPlotScaleItem\fP, \fBQwtPlotSeriesItem\fP, \fBQwtPlotShapeItem\fP, \fBQwtPlotSvgItem\fP, \fBQwtPlotTextLabel\fP, and \fBQwtPlotZoneItem\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBRttiValues\fP { \fBRtti_PlotItem\fP = 0, \fBRtti_PlotGrid\fP, \fBRtti_PlotScale\fP, \fBRtti_PlotLegend\fP, \fBRtti_PlotMarker\fP, \fBRtti_PlotCurve\fP, \fBRtti_PlotSpectroCurve\fP, \fBRtti_PlotIntervalCurve\fP, \fBRtti_PlotHistogram\fP, \fBRtti_PlotSpectrogram\fP, \fBRtti_PlotSVG\fP, \fBRtti_PlotTradingCurve\fP, \fBRtti_PlotBarChart\fP, \fBRtti_PlotMultiBarChart\fP, \fBRtti_PlotShape\fP, \fBRtti_PlotTextLabel\fP, \fBRtti_PlotZone\fP, \fBRtti_PlotUserItem\fP = 1000 }"
.br
.RI "\fIRuntime type information\&. \fP"
.ti -1c
.RI "enum \fBItemAttribute\fP { \fBLegend\fP = 0x01, \fBAutoScale\fP = 0x02, \fBMargins\fP = 0x04 }"
.br
.RI "\fIPlot Item Attributes\&. \fP"
.ti -1c
.RI "enum \fBItemInterest\fP { \fBScaleInterest\fP = 0x01, \fBLegendInterest\fP = 0x02 }"
.br
.RI "\fIPlot Item Interests\&. \fP"
.ti -1c
.RI "enum \fBRenderHint\fP { \fBRenderAntialiased\fP = 0x1 }"
.br
.RI "\fIRender hints\&. \fP"
.ti -1c
.RI "typedef QFlags< \fBItemAttribute\fP > \fBItemAttributes\fP"
.br
.RI "\fIPlot Item Attributes\&. \fP"
.ti -1c
.RI "typedef QFlags< \fBItemInterest\fP > \fBItemInterests\fP"
.br
.RI "\fIPlot Item Interests\&. \fP"
.ti -1c
.RI "typedef QFlags< \fBRenderHint\fP > \fBRenderHints\fP"
.br
.RI "\fIRender hints\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtPlotItem\fP (const \fBQwtText\fP &\fBtitle\fP=\fBQwtText\fP())"
.br
.ti -1c
.RI "virtual \fB~QwtPlotItem\fP ()"
.br
.RI "\fIDestroy the \fBQwtPlotItem\fP\&. \fP"
.ti -1c
.RI "void \fBattach\fP (\fBQwtPlot\fP *\fBplot\fP)"
.br
.RI "\fIAttach the item to a plot\&. \fP"
.ti -1c
.RI "void \fBdetach\fP ()"
.br
.RI "\fIThis method detaches a \fBQwtPlotItem\fP from any \fBQwtPlot\fP it has been associated with\&. \fP"
.ti -1c
.RI "\fBQwtPlot\fP * \fBplot\fP () const "
.br
.RI "\fIReturn attached plot\&. \fP"
.ti -1c
.RI "void \fBsetTitle\fP (const QString &\fBtitle\fP)"
.br
.ti -1c
.RI "void \fBsetTitle\fP (const \fBQwtText\fP &\fBtitle\fP)"
.br
.ti -1c
.RI "const \fBQwtText\fP & \fBtitle\fP () const "
.br
.ti -1c
.RI "virtual int \fBrtti\fP () const "
.br
.ti -1c
.RI "void \fBsetItemAttribute\fP (\fBItemAttribute\fP, bool on=true)"
.br
.ti -1c
.RI "bool \fBtestItemAttribute\fP (\fBItemAttribute\fP) const "
.br
.ti -1c
.RI "void \fBsetItemInterest\fP (\fBItemInterest\fP, bool on=true)"
.br
.ti -1c
.RI "bool \fBtestItemInterest\fP (\fBItemInterest\fP) const "
.br
.ti -1c
.RI "void \fBsetRenderHint\fP (\fBRenderHint\fP, bool on=true)"
.br
.ti -1c
.RI "bool \fBtestRenderHint\fP (\fBRenderHint\fP) const "
.br
.ti -1c
.RI "void \fBsetRenderThreadCount\fP (uint numThreads)"
.br
.ti -1c
.RI "uint \fBrenderThreadCount\fP () const "
.br
.ti -1c
.RI "void \fBsetLegendIconSize\fP (const QSize &)"
.br
.ti -1c
.RI "QSize \fBlegendIconSize\fP () const "
.br
.ti -1c
.RI "double \fBz\fP () const "
.br
.ti -1c
.RI "void \fBsetZ\fP (double \fBz\fP)"
.br
.RI "\fISet the z value\&. \fP"
.ti -1c
.RI "void \fBshow\fP ()"
.br
.RI "\fIShow the item\&. \fP"
.ti -1c
.RI "void \fBhide\fP ()"
.br
.RI "\fIHide the item\&. \fP"
.ti -1c
.RI "virtual void \fBsetVisible\fP (bool)"
.br
.ti -1c
.RI "bool \fBisVisible\fP () const "
.br
.ti -1c
.RI "void \fBsetAxes\fP (int \fBxAxis\fP, int \fByAxis\fP)"
.br
.ti -1c
.RI "void \fBsetXAxis\fP (int axis)"
.br
.ti -1c
.RI "int \fBxAxis\fP () const "
.br
.RI "\fIReturn xAxis\&. \fP"
.ti -1c
.RI "void \fBsetYAxis\fP (int axis)"
.br
.ti -1c
.RI "int \fByAxis\fP () const "
.br
.RI "\fIReturn yAxis\&. \fP"
.ti -1c
.RI "virtual void \fBitemChanged\fP ()"
.br
.ti -1c
.RI "virtual void \fBlegendChanged\fP ()"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (QPainter *painter, const \fBQwtScaleMap\fP &xMap, const \fBQwtScaleMap\fP &yMap, const QRectF &canvasRect) const =0"
.br
.RI "\fIDraw the item\&. \fP"
.ti -1c
.RI "virtual QRectF \fBboundingRect\fP () const "
.br
.ti -1c
.RI "virtual void \fBgetCanvasMarginHint\fP (const \fBQwtScaleMap\fP &xMap, const \fBQwtScaleMap\fP &yMap, const QRectF &canvasSize, double &left, double &top, double &right, double &bottom) const "
.br
.RI "\fICalculate a hint for the canvas margin\&. \fP"
.ti -1c
.RI "virtual void \fBupdateScaleDiv\fP (const \fBQwtScaleDiv\fP &, const \fBQwtScaleDiv\fP &)"
.br
.RI "\fIUpdate the item to changes of the axes scale division\&. \fP"
.ti -1c
.RI "virtual void \fBupdateLegend\fP (const \fBQwtPlotItem\fP *, const QList< \fBQwtLegendData\fP > &)"
.br
.RI "\fIUpdate the item to changes of the legend info\&. \fP"
.ti -1c
.RI "QRectF \fBscaleRect\fP (const \fBQwtScaleMap\fP &, const \fBQwtScaleMap\fP &) const "
.br
.RI "\fICalculate the bounding scale rectangle of 2 maps\&. \fP"
.ti -1c
.RI "QRectF \fBpaintRect\fP (const \fBQwtScaleMap\fP &, const \fBQwtScaleMap\fP &) const "
.br
.RI "\fICalculate the bounding paint rectangle of 2 maps\&. \fP"
.ti -1c
.RI "virtual QList< \fBQwtLegendData\fP > \fBlegendData\fP () const "
.br
.RI "\fIReturn all information, that is needed to represent the item on the legend\&. \fP"
.ti -1c
.RI "virtual \fBQwtGraphic\fP \fBlegendIcon\fP (int index, const QSizeF &) const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtGraphic\fP \fBdefaultIcon\fP (const QBrush &, const QSizeF &) const "
.br
.RI "\fIReturn a default icon from a brush\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Base class for items on the plot canvas\&. 

A plot item is 'something', that can be painted on the plot canvas, or only affects the scales of the plot widget\&. They can be categorized as:
.PP
.IP "\(bu" 2
Representator
.br
 A 'Representator' is an item that represents some sort of data on the plot canvas\&. The different representator classes are organized according to the characteristics of the data:
.IP "  \(bu" 4
\fBQwtPlotMarker\fP Represents a point or a horizontal/vertical coordinate
.IP "  \(bu" 4
\fBQwtPlotCurve\fP Represents a series of points
.IP "  \(bu" 4
\fBQwtPlotSpectrogram\fP ( \fBQwtPlotRasterItem\fP ) Represents raster data
.IP "  \(bu" 4
\&.\&.\&.
.PP

.IP "\(bu" 2
Decorators
.br
 A 'Decorator' is an item, that displays additional information, that is not related to any data:
.IP "  \(bu" 4
\fBQwtPlotGrid\fP
.IP "  \(bu" 4
\fBQwtPlotScaleItem\fP
.IP "  \(bu" 4
\fBQwtPlotSvgItem\fP
.IP "  \(bu" 4
\&.\&.\&.
.PP

.PP
.PP
Depending on the \fBQwtPlotItem::ItemAttribute\fP flags, an item is included into autoscaling or has an entry on the legend\&.
.PP
Before misusing the existing item classes it might be better to implement a new type of plot item ( don't implement a watermark as spectrogram )\&. Deriving a new type of \fBQwtPlotItem\fP primarily means to implement the YourPlotItem::draw() method\&.
.PP
\fBSee Also:\fP
.RS 4
The cpuplot example shows the implementation of additional \fBplot\fP items\&. 
.RE
.PP

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtPlotItem::ItemAttribute\fP"

.PP
Plot Item Attributes\&. Various aspects of a plot widget depend on the attributes of the attached plot items\&. If and how a single plot item participates in these updates depends on its attributes\&.
.PP
\fBSee Also:\fP
.RS 4
\fBsetItemAttribute()\fP, \fBtestItemAttribute()\fP, \fBItemInterest\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILegend \fP\fP
The item is represented on the legend\&. 
.TP
\fB\fIAutoScale \fP\fP
The \fBboundingRect()\fP of the item is included in the autoscaling calculation as long as its width or height is >= 0\&.0\&. 
.TP
\fB\fIMargins \fP\fP
The item needs extra space to display something outside its bounding rectangle\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBgetCanvasMarginHint()\fP 
.RE
.PP

.SS "enum \fBQwtPlotItem::ItemInterest\fP"

.PP
Plot Item Interests\&. Plot items might depend on the situation of the corresponding plot widget\&. By enabling an interest the plot item will be notified, when the corresponding attribute of the plot widgets has changed\&.
.PP
\fBSee Also:\fP
.RS 4
\fBsetItemAttribute()\fP, \fBtestItemAttribute()\fP, \fBItemInterest\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIScaleInterest \fP\fP
The item is interested in updates of the scales 
.PP
\fBSee Also:\fP
.RS 4
\fBupdateScaleDiv()\fP 
.RE
.PP

.TP
\fB\fILegendInterest \fP\fP
The item is interested in updates of the legend ( of other items ) This flag is intended for items, that want to implement a legend for displaying entries of other plot item\&.
.PP
\fBNote:\fP
.RS 4
If the plot item wants to be represented on a legend enable \fBQwtPlotItem::Legend\fP instead\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBupdateLegend()\fP 
.RE
.PP

.SS "enum \fBQwtPlotItem::RenderHint\fP"

.PP
Render hints\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIRenderAntialiased \fP\fP
Enable antialiasing\&. 
.SS "enum \fBQwtPlotItem::RttiValues\fP"

.PP
Runtime type information\&. RttiValues is used to cast plot items, without having to enable runtime type information of the compiler\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIRtti_PlotItem \fP\fP
Unspecific value, that can be used, when it doesn't matter\&. 
.TP
\fB\fIRtti_PlotGrid \fP\fP
For \fBQwtPlotGrid\fP\&. 
.TP
\fB\fIRtti_PlotScale \fP\fP
For \fBQwtPlotScaleItem\fP\&. 
.TP
\fB\fIRtti_PlotLegend \fP\fP
For \fBQwtPlotLegendItem\fP\&. 
.TP
\fB\fIRtti_PlotMarker \fP\fP
For \fBQwtPlotMarker\fP\&. 
.TP
\fB\fIRtti_PlotCurve \fP\fP
For \fBQwtPlotCurve\fP\&. 
.TP
\fB\fIRtti_PlotSpectroCurve \fP\fP
For \fBQwtPlotSpectroCurve\fP\&. 
.TP
\fB\fIRtti_PlotIntervalCurve \fP\fP
For \fBQwtPlotIntervalCurve\fP\&. 
.TP
\fB\fIRtti_PlotHistogram \fP\fP
For \fBQwtPlotHistogram\fP\&. 
.TP
\fB\fIRtti_PlotSpectrogram \fP\fP
For \fBQwtPlotSpectrogram\fP\&. 
.TP
\fB\fIRtti_PlotSVG \fP\fP
For \fBQwtPlotSvgItem\fP\&. 
.TP
\fB\fIRtti_PlotTradingCurve \fP\fP
For \fBQwtPlotTradingCurve\fP\&. 
.TP
\fB\fIRtti_PlotBarChart \fP\fP
For \fBQwtPlotBarChart\fP\&. 
.TP
\fB\fIRtti_PlotMultiBarChart \fP\fP
For \fBQwtPlotMultiBarChart\fP\&. 
.TP
\fB\fIRtti_PlotShape \fP\fP
For \fBQwtPlotShapeItem\fP\&. 
.TP
\fB\fIRtti_PlotTextLabel \fP\fP
For \fBQwtPlotTextLabel\fP\&. 
.TP
\fB\fIRtti_PlotZone \fP\fP
For \fBQwtPlotZoneItem\fP\&. 
.TP
\fB\fIRtti_PlotUserItem \fP\fP
Values >= Rtti_PlotUserItem are reserved for plot items not implemented in the Qwt library\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtPlotItem::QwtPlotItem (const \fBQwtText\fP &title = \fC\fBQwtText\fP()\fP)\fC [explicit]\fP"
Constructor 
.PP
\fBParameters:\fP
.RS 4
\fItitle\fP Title of the item 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void QwtPlotItem::attach (\fBQwtPlot\fP *plot)"

.PP
Attach the item to a plot\&. This method will attach a \fBQwtPlotItem\fP to the \fBQwtPlot\fP argument\&. It will first detach the \fBQwtPlotItem\fP from any plot from a previous call to attach (if necessary)\&. If a NULL argument is passed, it will detach from any \fBQwtPlot\fP it was attached to\&.
.PP
\fBParameters:\fP
.RS 4
\fIplot\fP Plot widget 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBdetach()\fP 
.RE
.PP

.SS "QRectF QwtPlotItem::boundingRect () const\fC [virtual]\fP"

.PP
\fBReturns:\fP
.RS 4
An invalid bounding rect: QRectF(1\&.0, 1\&.0, -2\&.0, -2\&.0) 
.RE
.PP
\fBNote:\fP
.RS 4
A width or height < 0\&.0 is ignored by the autoscaler 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotTradingCurve\fP, \fBQwtPlotMarker\fP, \fBQwtPlotIntervalCurve\fP, \fBQwtPlotHistogram\fP, \fBQwtPlotRasterItem\fP, \fBQwtPlotShapeItem\fP, \fBQwtPlotBarChart\fP, \fBQwtPlotMultiBarChart\fP, \fBQwtPlotZoneItem\fP, \fBQwtPlotSeriesItem\fP, and \fBQwtPlotSvgItem\fP\&.
.SS "\fBQwtGraphic\fP QwtPlotItem::defaultIcon (const QBrush &brush, const QSizeF &size) const\fC [protected]\fP"

.PP
Return a default icon from a brush\&. The default icon is a filled rectangle used in several derived classes as \fBlegendIcon()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIbrush\fP Fill brush 
.br
\fIsize\fP Icon size
.RE
.PP
\fBReturns:\fP
.RS 4
A filled rectangle 
.RE
.PP

.SS "void QwtPlotItem::detach ()"

.PP
This method detaches a \fBQwtPlotItem\fP from any \fBQwtPlot\fP it has been associated with\&. \fBdetach()\fP is equivalent to calling attach( NULL ) 
.PP
\fBSee Also:\fP
.RS 4
\fBattach()\fP 
.RE
.PP

.SS "virtual void QwtPlotItem::draw (QPainter *painter, const \fBQwtScaleMap\fP &xMap, const \fBQwtScaleMap\fP &yMap, const QRectF &canvasRect) const\fC [pure virtual]\fP"

.PP
Draw the item\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIxMap\fP Maps x-values into pixel coordinates\&. 
.br
\fIyMap\fP Maps y-values into pixel coordinates\&. 
.br
\fIcanvasRect\fP Contents rect of the canvas in painter coordinates 
.RE
.PP

.PP
Implemented in \fBQwtPlotMarker\fP, \fBQwtPlotLegendItem\fP, \fBQwtPlotRasterItem\fP, \fBQwtPlotShapeItem\fP, \fBQwtPlotSpectrogram\fP, \fBQwtPlotScaleItem\fP, \fBQwtPlotGrid\fP, \fBQwtPlotTextLabel\fP, \fBQwtPlotZoneItem\fP, \fBQwtPlotSvgItem\fP, and \fBQwtPlotSeriesItem\fP\&.
.SS "void QwtPlotItem::getCanvasMarginHint (const \fBQwtScaleMap\fP &xMap, const \fBQwtScaleMap\fP &yMap, const QRectF &canvasRect, double &left, double &top, double &right, double &bottom) const\fC [virtual]\fP"

.PP
Calculate a hint for the canvas margin\&. When the \fBQwtPlotItem::Margins\fP flag is enabled the plot item indicates, that it needs some margins at the borders of the canvas\&. This is f\&.e\&. used by bar charts to reserve space for displaying the bars\&.
.PP
The margins are in target device coordinates ( pixels on screen )
.PP
\fBParameters:\fP
.RS 4
\fIxMap\fP Maps x-values into pixel coordinates\&. 
.br
\fIyMap\fP Maps y-values into pixel coordinates\&. 
.br
\fIcanvasRect\fP Contents rectangle of the canvas in painter coordinates 
.br
\fIleft\fP Returns the left margin 
.br
\fItop\fP Returns the top margin 
.br
\fIright\fP Returns the right margin 
.br
\fIbottom\fP Returns the bottom margin
.RE
.PP
\fBReturns:\fP
.RS 4
The default implementation returns 0 for all margins
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBQwtPlot::getCanvasMarginsHint()\fP, \fBQwtPlot::updateCanvasMargins()\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotAbstractBarChart\fP\&.
.SS "bool QwtPlotItem::isVisible () const"

.PP
\fBReturns:\fP
.RS 4
true if visible 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetVisible()\fP, \fBshow()\fP, \fBhide()\fP 
.RE
.PP

.SS "void QwtPlotItem::itemChanged ()\fC [virtual]\fP"
Update the legend and call \fBQwtPlot::autoRefresh()\fP for the parent plot\&.
.PP
\fBSee Also:\fP
.RS 4
QwtPlot::legendChanged(), \fBQwtPlot::autoRefresh()\fP 
.RE
.PP

.SS "void QwtPlotItem::legendChanged ()\fC [virtual]\fP"
Update the legend of the parent plot\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBQwtPlot::updateLegend()\fP, \fBitemChanged()\fP 
.RE
.PP

.SS "QList< \fBQwtLegendData\fP > QwtPlotItem::legendData () const\fC [virtual]\fP"

.PP
Return all information, that is needed to represent the item on the legend\&. Most items are represented by one entry on the legend showing an icon and a text, but f\&.e\&. \fBQwtPlotMultiBarChart\fP displays one entry for each bar\&.
.PP
\fBQwtLegendData\fP is basically a list of QVariants that makes it possible to overload and reimplement \fBlegendData()\fP to return almost any type of information, that is understood by the receiver that acts as the legend\&.
.PP
The default implementation returns one entry with the \fBtitle()\fP of the item and the \fBlegendIcon()\fP\&.
.PP
\fBReturns:\fP
.RS 4
Data, that is needed to represent the item on the legend 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBtitle()\fP, \fBlegendIcon()\fP, \fBQwtLegend\fP, \fBQwtPlotLegendItem\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotBarChart\fP, and \fBQwtPlotMultiBarChart\fP\&.
.SS "\fBQwtGraphic\fP QwtPlotItem::legendIcon (intindex, const QSizeF &size) const\fC [virtual]\fP"

.PP
\fBReturns:\fP
.RS 4
Icon representing the item on the legend
.RE
.PP
The default implementation returns an invalid icon
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Index of the legend entry ( usually there is only one ) 
.br
\fIsize\fP Icon size
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetLegendIconSize()\fP, \fBlegendData()\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotCurve\fP, \fBQwtPlotTradingCurve\fP, \fBQwtPlotMarker\fP, \fBQwtPlotIntervalCurve\fP, \fBQwtPlotHistogram\fP, \fBQwtPlotBarChart\fP, \fBQwtPlotShapeItem\fP, and \fBQwtPlotMultiBarChart\fP\&.
.SS "QSize QwtPlotItem::legendIconSize () const"

.PP
\fBReturns:\fP
.RS 4
Legend icon size 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetLegendIconSize()\fP, \fBlegendIcon()\fP 
.RE
.PP

.SS "QRectF QwtPlotItem::paintRect (const \fBQwtScaleMap\fP &xMap, const \fBQwtScaleMap\fP &yMap) const"

.PP
Calculate the bounding paint rectangle of 2 maps\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxMap\fP Maps x-values into pixel coordinates\&. 
.br
\fIyMap\fP Maps y-values into pixel coordinates\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Bounding paint rectangle of the scale maps, not normalized 
.RE
.PP

.SS "uint QwtPlotItem::renderThreadCount () const"

.PP
\fBReturns:\fP
.RS 4
Number of threads to be used for rendering\&. If numThreads() is set to 0, the system specific ideal thread count is used\&. 
.RE
.PP

.SS "int QwtPlotItem::rtti () const\fC [virtual]\fP"
Return rtti for the specific class represented\&. \fBQwtPlotItem\fP is simply a virtual interface class, and base classes will implement this method with specific rtti values so a user can differentiate them\&.
.PP
The rtti value is useful for environments, where the runtime type information is disabled and it is not possible to do a dynamic_cast<\&.\&.\&.>\&.
.PP
\fBReturns:\fP
.RS 4
rtti value 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBRttiValues\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotCurve\fP, \fBQwtPlotTradingCurve\fP, \fBQwtPlotShapeItem\fP, \fBQwtPlotSpectrogram\fP, \fBQwtPlotIntervalCurve\fP, \fBQwtPlotHistogram\fP, \fBQwtPlotMarker\fP, \fBQwtPlotBarChart\fP, \fBQwtPlotMultiBarChart\fP, \fBQwtPlotLegendItem\fP, \fBQwtPlotScaleItem\fP, \fBQwtPlotTextLabel\fP, \fBQwtPlotSpectroCurve\fP, \fBQwtPlotSvgItem\fP, \fBQwtPlotGrid\fP, and \fBQwtPlotZoneItem\fP\&.
.SS "QRectF QwtPlotItem::scaleRect (const \fBQwtScaleMap\fP &xMap, const \fBQwtScaleMap\fP &yMap) const"

.PP
Calculate the bounding scale rectangle of 2 maps\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxMap\fP Maps x-values into pixel coordinates\&. 
.br
\fIyMap\fP Maps y-values into pixel coordinates\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Bounding scale rect of the scale maps, not normalized 
.RE
.PP

.SS "void QwtPlotItem::setAxes (intxAxis, intyAxis)"
Set X and Y axis
.PP
The item will painted according to the coordinates of its Axes\&.
.PP
\fBParameters:\fP
.RS 4
\fIxAxis\fP X Axis ( \fBQwtPlot::xBottom\fP or \fBQwtPlot::xTop\fP ) 
.br
\fIyAxis\fP Y Axis ( \fBQwtPlot::yLeft\fP or \fBQwtPlot::yRight\fP )
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetXAxis()\fP, \fBsetYAxis()\fP, \fBxAxis()\fP, \fByAxis()\fP, \fBQwtPlot::Axis\fP 
.RE
.PP

.SS "void QwtPlotItem::setItemAttribute (\fBItemAttribute\fPattribute, boolon = \fCtrue\fP)"
Toggle an item attribute
.PP
\fBParameters:\fP
.RS 4
\fIattribute\fP Attribute type 
.br
\fIon\fP true/false
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBtestItemAttribute()\fP, \fBItemInterest\fP 
.RE
.PP

.SS "void QwtPlotItem::setItemInterest (\fBItemInterest\fPinterest, boolon = \fCtrue\fP)"
Toggle an item interest
.PP
\fBParameters:\fP
.RS 4
\fIinterest\fP Interest type 
.br
\fIon\fP true/false
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBtestItemInterest()\fP, \fBItemAttribute\fP 
.RE
.PP

.SS "void QwtPlotItem::setLegendIconSize (const QSize &size)"
Set the size of the legend icon
.PP
The default setting is 8x8 pixels
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP Size 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBlegendIconSize()\fP, \fBlegendIcon()\fP 
.RE
.PP

.SS "void QwtPlotItem::setRenderHint (\fBRenderHint\fPhint, boolon = \fCtrue\fP)"
Toggle an render hint
.PP
\fBParameters:\fP
.RS 4
\fIhint\fP Render hint 
.br
\fIon\fP true/false
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBtestRenderHint()\fP, \fBRenderHint\fP 
.RE
.PP

.SS "void QwtPlotItem::setRenderThreadCount (uintnumThreads)"
On multi core systems rendering of certain plot item ( f\&.e \fBQwtPlotRasterItem\fP ) can be done in parallel in several threads\&.
.PP
The default setting is set to 1\&.
.PP
\fBParameters:\fP
.RS 4
\fInumThreads\fP Number of threads to be used for rendering\&. If numThreads is set to 0, the system specific ideal thread count is used\&.
.RE
.PP
The default thread count is 1 ( = no additional threads ) 
.SS "void QwtPlotItem::setTitle (const QString &title)"
Set a new title
.PP
\fBParameters:\fP
.RS 4
\fItitle\fP Title 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBtitle()\fP 
.RE
.PP

.SS "void QwtPlotItem::setTitle (const \fBQwtText\fP &title)"
Set a new title
.PP
\fBParameters:\fP
.RS 4
\fItitle\fP Title 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBtitle()\fP 
.RE
.PP

.SS "void QwtPlotItem::setVisible (boolon)\fC [virtual]\fP"
Show/Hide the item
.PP
\fBParameters:\fP
.RS 4
\fIon\fP Show if true, otherwise hide 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBisVisible()\fP, \fBshow()\fP, \fBhide()\fP 
.RE
.PP

.SS "void QwtPlotItem::setXAxis (intaxis)"
Set the X axis
.PP
The item will painted according to the coordinates its Axes\&.
.PP
\fBParameters:\fP
.RS 4
\fIaxis\fP X Axis ( \fBQwtPlot::xBottom\fP or \fBQwtPlot::xTop\fP ) 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetAxes()\fP, \fBsetYAxis()\fP, \fBxAxis()\fP, \fBQwtPlot::Axis\fP 
.RE
.PP

.SS "void QwtPlotItem::setYAxis (intaxis)"
Set the Y axis
.PP
The item will painted according to the coordinates its Axes\&.
.PP
\fBParameters:\fP
.RS 4
\fIaxis\fP Y Axis ( \fBQwtPlot::yLeft\fP or \fBQwtPlot::yRight\fP ) 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetAxes()\fP, \fBsetXAxis()\fP, \fByAxis()\fP, \fBQwtPlot::Axis\fP 
.RE
.PP

.SS "void QwtPlotItem::setZ (doublez)"

.PP
Set the z value\&. Plot items are painted in increasing z-order\&.
.PP
\fBParameters:\fP
.RS 4
\fIz\fP Z-value 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBz()\fP, \fBQwtPlotDict::itemList()\fP 
.RE
.PP

.SS "bool QwtPlotItem::testItemAttribute (\fBItemAttribute\fPattribute) const"
Test an item attribute
.PP
\fBParameters:\fP
.RS 4
\fIattribute\fP Attribute type 
.RE
.PP
\fBReturns:\fP
.RS 4
true/false 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetItemAttribute()\fP, \fBItemInterest\fP 
.RE
.PP

.SS "bool QwtPlotItem::testItemInterest (\fBItemInterest\fPinterest) const"
Test an item interest
.PP
\fBParameters:\fP
.RS 4
\fIinterest\fP Interest type 
.RE
.PP
\fBReturns:\fP
.RS 4
true/false 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetItemInterest()\fP, \fBItemAttribute\fP 
.RE
.PP

.SS "bool QwtPlotItem::testRenderHint (\fBRenderHint\fPhint) const"
Test a render hint
.PP
\fBParameters:\fP
.RS 4
\fIhint\fP Render hint 
.RE
.PP
\fBReturns:\fP
.RS 4
true/false 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetRenderHint()\fP, \fBRenderHint\fP 
.RE
.PP

.SS "const \fBQwtText\fP & QwtPlotItem::title () const"

.PP
\fBReturns:\fP
.RS 4
Title of the item 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBsetTitle()\fP 
.RE
.PP

.SS "void QwtPlotItem::updateLegend (const \fBQwtPlotItem\fP *item, const QList< \fBQwtLegendData\fP > &data)\fC [virtual]\fP"

.PP
Update the item to changes of the legend info\&. Plot items that want to display a legend ( not those, that want to be displayed on a legend ! ) will have to implement \fBupdateLegend()\fP\&.
.PP
\fBupdateLegend()\fP is only called when the LegendInterest interest is enabled\&. The default implementation does nothing\&.
.PP
\fBParameters:\fP
.RS 4
\fIitem\fP Plot item to be displayed on a legend 
.br
\fIdata\fP Attributes how to display item on the legend
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBQwtPlotLegendItem\fP
.RE
.PP
\fBNote:\fP
.RS 4
Plot items, that want to be displayed on a legend need to enable the \fBQwtPlotItem::Legend\fP flag and to implement \fBlegendData()\fP and \fBlegendIcon()\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotLegendItem\fP\&.
.SS "void QwtPlotItem::updateScaleDiv (const \fBQwtScaleDiv\fP &xScaleDiv, const \fBQwtScaleDiv\fP &yScaleDiv)\fC [virtual]\fP"

.PP
Update the item to changes of the axes scale division\&. Update the item, when the axes of plot have changed\&. The default implementation does nothing, but items that depend on the scale division (like \fBQwtPlotGrid()\fP) have to reimplement \fBupdateScaleDiv()\fP
.PP
\fBupdateScaleDiv()\fP is only called when the ScaleInterest interest is enabled\&. The default implementation does nothing\&.
.PP
\fBParameters:\fP
.RS 4
\fIxScaleDiv\fP Scale division of the x-axis 
.br
\fIyScaleDiv\fP Scale division of the y-axis
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBQwtPlot::updateAxes()\fP, \fBScaleInterest\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotScaleItem\fP, \fBQwtPlotGrid\fP, and \fBQwtPlotSeriesItem\fP\&.
.SS "double QwtPlotItem::z () const"
Plot items are painted in increasing z-order\&.
.PP
\fBReturns:\fP
.RS 4
\fBsetZ()\fP, \fBQwtPlotDict::itemList()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code\&.
