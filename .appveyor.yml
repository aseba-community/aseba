version: '{build}'

init:
- git config --global core.autocrlf input

shallow_clone: true

matrix:
  fast_finish: true

install:
  - git clone https://github.com/cor3ntin/enki.git %APPVEYOR_BUILD_FOLDER%\enki --depth=1 --branch test_build_windows
  - git clone https://github.com/aseba-community/dashel.git %APPVEYOR_BUILD_FOLDER%\dashel --depth=1 --branch fix_includes

  - mkdir C:\projects\deps
  - cd C:\projects\deps

  # Install Bonjour
  - 7z x "%APPVEYOR_BUILD_FOLDER%\third_party\bonjoursdksetup.exe"
  - if [%platform%]==[x64] cd C:\projects\deps && msiexec /i C:\projects\deps\Bonjour64.msi /qb /quiet
  - if [%platform%]==[x64] cd C:\projects\deps && msiexec /i C:\projects\deps\BonjourSDK64.msi /qb /quiet
  - if [%platform%]==[x86] cd C:\projects\deps && msiexec /i C:\projects\deps\Bonjour.msi /qb /quiet
  - if [%platform%]==[x86] cd C:\projects\deps && msiexec /i C:\projects\deps\BonjourSDK.msi /qb /quiet

  # Use msys packages for the mingw builds
  - if [%COMPILER%]==[MinGW] (
      %BASH% -lc "pacman -R catgets libcatgets --noconfirm"
    )

  - if [%COMPILER%]==[MinGW] if [%ARCH%]==[x86] %BASH% -lc "pacman --noconfirm -Sy -d mingw-w64-i686-{binutils,gcc,gcc-libs,cmake,qt5,qwt-qt5,libxml2,SDL2}"
  - if [%COMPILER%]==[MinGW] if [%ARCH%]==[x64] %BASH% -lc "pacman --noconfirm -Sy -d mingw-w64-x86_64-{binutils,gcc,gcc-libs,cmake,qt5,qwt-qt5,libxml2,SDL2}"


  # Install cmake
  - if [%USE_VS_TOOLCHAIN%]==[true] (
      cd C:\projects\deps &&
      appveyor DownloadFile %CMAKE_URL% -FileName cmake.zip &&
      7z x cmake.zip -oC:\projects\deps > nul &&
      move C:\projects\deps\cmake-* C:\projects\deps\cmake &&
      set "PATH=C:\projects\deps\cmake\bin;%PATH%"
      cmake --version
    )

  #Install LLVM to have a newer clang cl
  - if [%COMPILER%]==[ClangCL] (
      cd C:\projects\deps &&
      appveyor DownloadFile %LLVM_URL% -FileName llvm.exe &&
      7z x llvm.exe -oC:\projects\deps\llvm > nul &&
      set "PATH=C:\projects\deps\llvm\bin;%PATH%" &&
      set "LLD_LINK=C:\projects\deps\llvm\bin\lld-link.exe"
    )
  # Install SDL ( for msvc & clang)
  - if [%USE_VS_TOOLCHAIN%]==[true] (
      appveyor DownloadFile %SDL_URL% -FileName sdl.zip  &&
      7z x sdl.zip -oC:\projects\deps\sdl > nul
    )

  - appveyor DownloadFile %NINJA_URL% -FileName ninja.zip
  - 7z x ninja.zip -oC:\projects\deps\ninja > nul
  - set "PATH=C:\projects\deps\ninja;%PATH%"
  - ninja --version

before_build:
  - if [%USE_VS_TOOLCHAIN%]==[true] (
      set "PATH=%QT5%\bin;%PATH%" &&
      call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" %ARCH%
    )

build_script:
  - cd "%APPVEYOR_BUILD_FOLDER%"
  - mkdir build
  - cd build
  - if [%COMPILER%]==[MinGW] if [%ARCH%]==[x86] set MinGWPath="/mingw32"
  - if [%COMPILER%]==[MinGW] if [%ARCH%]==[x64] set MinGWPath="/mingw64"
  - if [%COMPILER%]==[MinGW] (
      %BASH% -x -lc "cd '%APPVEYOR_BUILD_FOLDER%\\build' && export PATH=\"%MinGWPath%/bin:${PATH}\"  && cmake .. -GNinja -DBUILD_SHARED_LIBS=OFF -DCMAKE_PREFIX_PATH='%MinGWPath%;/c/Program Files/Bonjour SDK' && ninja -v"
    )

  - if [%COMPILER%]==[ClangCL] (
      cmake .. -GNinja -DBUILD_SHARED_LIBS=OFF "-DCMAKE_TOOLCHAIN_FILE=%APPVEYOR_BUILD_FOLDER%\windows\clang-cl-toolchain.cmake" "-DCMAKE_LINKER=%LLD_LINK%" "-DCMAKE_PREFIX_PATH=%QT5%;C:\Program Files\Bonjour SDK" -DCMAKE_BUILD_TYPE=Release &&
      ninja -v &&
      ctest
   )


  #- if [%COMPILER%]==[MinGW] (
      #%BASH% -x -lc "cd '%APPVEYOR_BUILD_FOLDER%\\build' && CTEST_OUTPUT_ON_FAILURE=1 ctest -v"
    #)

cache:
  - '%MSYS_CACHE%'

environment:
  NINJA_URL: https://github.com/ninja-build/ninja/releases/download/v1.6.0/ninja-win.zip
  SDL_URL: https://libsdl.org/release/SDL2-devel-2.0.7-VC.zip
  CMAKE_URL: https://cmake.org/files/v3.8/cmake-3.8.0-win64-x64.zip
  APPVEYOR_CACHE_ENTRY_ZIP_ARGS: "-t7z -m0=lzma -mx=5"
  matrix:
    #- platform: x86
      #ARCH: x86
      #configuration: Debug
      #QT5: C:\Qt\5.10.0\msvc2017_64
      #CXXFLAGS: "-DNOMINMAX -DWIN32_LEAN_AND_MEAN"
      #COMPILER: MSVC17
      ##CFLAGS: "-m32"
    #- platform: x64
      #ARCH: x64
      #configuration: Debug
      #QT5: C:\Qt\5.10.0\msvc2017_64
      #CXXFLAGS: "-DNOMINMAX -DWIN32_LEAN_AND_MEAN"
      #COMPILER: MSVC17

    - platform: x64
      COMPILER: MinGW
      ARCH: x86
      BASH: C:\msys64\usr\bin\bash
      image: Visual Studio 2015
      MSYS_CACHE: C:\msys64\var\cache\pacman\pkg

    - platform: x64
      COMPILER: MinGW
      ARCH: x64
      BASH: C:\msys64\usr\bin\bash
      image: Visual Studio 2015
      MSYS_CACHE: C:\msys64\var\cache\pacman\pkg

    - platform: x64
      COMPILER: ClangCL
      ARCH: x64
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      LLVM_URL: http://prereleases.llvm.org/win-snapshots/LLVM-7.0.0-r323406-win64.exe
      LLVM_VERSION: 7.0
      USE_VS_TOOLCHAIN: true
      QT5: C:\Qt\5.10.0\msvc2017_64

